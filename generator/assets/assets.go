// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (8.705kB)
// enum_string.tmpl (9.868kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x5f\x8f\xdb\xb8\x11\x7f\xb6\x3e\xc5\x9c\x90\xbb\x93\x5c\x47\x4e\xd1\xa2\x0f\x39\xec\xc3\xe5\x4f\x83\x3b\xf4\x36\x41\x37\xcd\x4b\x10\x04\x5c\x69\xb4\xe6\xad\x44\xea\x48\xca\x2b\x57\xd5\x77\x2f\x86\xa4\x64\x59\x96\x77\xb7\xe9\xee\x05\x45\x5f\x0c\x53\x1c\x0e\xe7\x37\x33\x9c\x3f\x64\xdb\x3e\x85\x0c\x73\x2e\x10\xc2\x0d\xb2\x0c\x55\xd8\x75\xc1\x7a\x0d\x2f\x65\x86\x70\x85\x02\x15\x33\x98\xc1\xe5\x0e\xae\xe4\x53\x14\x75\x09\xaf\xde\xc2\xf9\xdb\xf7\xf0\xfa\xd5\x4f\xef\x13\xa2\xfc\x80\x4a\x73\x29\x9e\x43\xdb\x42\xb2\x75\x03\x70\x4c\xfe\x8e\x5b\xbe\x9f\x53\x7e\xe4\x27\x5f\xd4\xbc\xc8\xe0\x15\x33\xe8\xa6\x2f\x69\x4c\xc3\xd1\xbc\x81\x17\xbb\xfd\xac\x79\xb1\xa3\xb9\xa0\x62\xe9\x35\xbb\x42\x68\xdb\xc4\xff\xa5\xaf\xbc\xac\xa4\x32\x10\x05\x00\x00\x61\x5e\x9a\x30\x88\x83\xb6\x45\x91\xc1\x53\x9a\x1f\x43\x25\x20\x04\x34\x95\x42\xd3\x12\x9a\x7b\x42\x1f\xcf\x59\x89\xf0\xfc\x0c\x12\x1a\x24\x76\x44\x8b\x87\xf9\xf7\xbb\x6a\x34\x6f\x47\xc3\xfc\x96\x29\x4d\x73\x19\x4f\x0d\x84\x05\xd3\x46\xe6\xb9\x46\x13\x42\xf8\x2c\xf4\x64\xa0\x98\xb8\x42\x78\xa2\x7e\x12\x19\x36\x2b\x5a\x54\xd4\x23\x8e\x1f\x68\xa8\x09\xe5\xc2\xf2\x24\x2e\x6f\x2d\x17\xa2\xa9\x8a\x3a\xbd\x3e\x64\xed\x76\xfd\x17\xe4\x5c\x69\x03\x5d\xd7\xb6\xf0\x44\x0e\x0b\xfc\x3f\xbf\xdd\x08\x82\xdf\xd7\xed\x03\x3c\x07\xfc\xcd\x7f\x73\xa0\xc3\xcf\x61\xd7\xad\xd7\x70\x71\xcd\xab\x0a\x33\x70\x53\x6d\x8b\x85\x46\x3b\xd1\xb6\x9e\xfc\x9d\xc2\x9c\x37\x98\xd1\xb2\xae\x03\xae\x81\xd1\x64\xaf\xcc\xae\x03\x99\x83\xa1\x3d\x87\x25\xee\x7b\x62\x6d\xd3\x23\xe5\x79\xbf\xff\x4b\x59\x96\x28\x0c\x4d\x8c\xf7\x19\x7d\x26\x7a\xb7\x94\x4c\x7d\x4a\x92\x3d\x2e\x8f\xfe\x99\x55\xcf\x58\xb2\x33\xe0\xd2\x30\x47\x48\x6e\xf1\x2c\x1c\x94\xd7\x75\xf0\x07\x18\x29\x93\x96\xda\x3d\x9d\x0e\xfc\x8a\xb1\x7d\xc6\x94\xc7\x9b\x9c\xe4\xf6\xe4\x33\x19\xca\x32\xb0\xa6\x3c\xb4\xae\xfb\xe3\x3d\xcc\x61\x8e\xc9\x95\xc1\x60\x59\x15\x74\x58\x42\x6d\x14\x17\x57\xa8\x42\x48\xec\xe9\xd8\x32\x05\x9f\xdb\x76\xef\xc1\x5d\xf7\x0b\xab\xe0\x8c\xf6\x2f\x59\xc5\xf3\x9d\xf3\x35\x4b\x4c\x26\xb6\xeb\x81\x97\x55\x81\xa4\x61\x0d\x66\x83\xfe\x2b\x2a\xe0\xc2\xa0\xca\x59\x8a\x49\x90\xd7\x22\x85\xa8\x81\x43\xe6\xb1\xa7\x8d\x62\x70\xa2\x40\x1b\x2c\x78\x4e\x83\x15\xc8\x6b\x42\x77\x2c\xce\xc7\xe6\xd3\x0f\x34\xd9\x06\x8b\x85\x42\x53\x2b\x41\xf4\xc1\xa2\x0b\xfa\x61\x5e\x9a\xe4\xa2\x52\x5c\x98\x3c\x0a\x0f\xd7\x47\xdf\x66\x71\xb8\x82\x26\x0e\xe6\xe1\xda\x43\xe4\x00\xd7\xe2\x00\x72\x52\xc8\x1b\x54\x29\xd3\xd8\xa3\x7f\xc7\x94\xc6\xc3\xe5\xc0\x0c\x69\x97\x14\x21\x21\x95\x62\x8b\xca\x00\xeb\xc1\x19\x69\x1d\x7c\xbc\xc0\x6b\x66\x86\x55\x24\xe8\x30\xb9\x95\x31\x44\x87\x93\x2b\x40\xa5\xa4\x8a\xbd\xbe\x9a\x13\xda\xb2\x68\x3e\x12\xa3\x23\x95\x35\x2b\x10\xbc\x08\x16\x5d\xdb\xf2\x1c\x12\x21\x7b\x64\x74\x72\x5e\xd2\x7f\x2e\x34\x0a\xcd\x0d\xdf\x22\x54\x24\xdf\x0a\x32\x02\xa0\xb1\x62\x14\xd9\xa1\x90\xf2\xba\xae\x08\x55\xa5\x70\x8b\xc2\x40\x2d\x04\xa6\xa8\x35\x53\x3b\x48\xa5\x36\x74\x7e\x7b\xb5\x91\x02\x06\x4d\xf0\x1c\x6e\x10\x32\x29\xbe\x37\x20\x10\x33\x30\x32\xb9\x07\x12\xb7\x5a\x27\xef\xe5\xdf\x88\xab\x55\x51\x7c\x1b\xb4\xde\xf1\x17\x1e\x25\x2b\x51\xdb\x70\xda\xd3\x4e\x74\xfe\x2c\x5e\x59\xef\x79\x4d\xda\xcd\xa3\xf0\x5b\x4d\x51\x49\x48\x32\xe2\x96\x15\x3c\x83\xa9\x1d\x8c\xda\xc1\xc7\x6f\xf5\xa7\x70\x05\xc4\x7d\x05\xbd\x8c\x3f\x4b\x2e\xa2\x09\x0a\xfa\xd5\x2b\x08\x57\x10\xc6\xb1\x0f\x46\x14\x11\x1e\x50\x22\x2f\x47\x3c\x0e\x75\x36\x83\x91\xce\x93\xb2\xd6\xc6\xda\xd2\x27\xca\x5f\x6a\x6d\xe6\xdc\xd8\xbb\xae\xbe\xd5\x77\x57\xc0\x44\x06\x15\x13\x3c\xd5\xc4\xdd\xcb\x65\xa5\xf2\x7e\x7d\x82\xff\xa1\x6f\x4f\xf6\x6e\x83\xc5\x96\x15\xd6\xc3\xc9\x11\x4e\x2d\x8f\xad\xbf\x10\xd1\x37\x67\x64\x6f\xeb\x01\x56\x98\x08\x95\x8a\xc7\xf1\x60\xcb\x8a\xa0\x0b\xfa\x9c\xd1\xeb\xa2\x32\x8a\xb4\x70\x2a\x32\xbd\x33\x2a\x8a\x61\x79\x2c\x9c\x67\xfa\x5d\x33\xc3\xb3\x64\x4a\x6f\x58\xd1\x6b\xd7\x8d\xde\x63\x63\xa6\x31\xd2\xd0\x37\x4f\x5d\xa0\x82\x12\xcd\x46\x66\xa7\xe3\xe4\x88\x55\x14\x43\xf4\xf1\xd3\xe5\xce\xe0\x38\x0a\x78\xa9\xdc\x44\xd4\x24\x7d\x60\x8d\xdd\x61\x70\x11\xeb\x1f\xa2\xbc\x43\xa4\x5a\xdc\x22\xd4\x72\x2a\xd5\x01\xbf\xc8\x32\x70\x02\xc4\x4e\x32\x12\x4c\xf8\xb2\xc8\x59\xdb\x12\xc5\xc1\xc2\x94\xd5\x97\x59\xd8\xe3\x44\xe5\x22\xfe\xb2\x81\x33\x30\x65\x35\x28\xc0\x81\x9d\xd8\x45\x2a\x48\xf4\x6f\x85\xfd\x11\x75\x51\x70\x61\x86\xff\xda\xa8\xae\x9b\x4b\x05\xaf\x95\x3a\xe7\xc5\x3b\xa3\xe0\xcc\xa1\xd1\xc9\x39\xde\x44\xa1\x2b\x7f\x2a\x69\xb3\x9b\x75\x7a\x5e\x84\x31\xac\xd7\x20\x05\x42\x85\xca\x95\x2c\xb9\x54\xd0\x57\x9b\x69\xc1\xf4\x06\xb5\xcb\x99\x29\x13\x47\x19\x33\x65\x42\xcc\x27\xcc\x23\x9d\x13\x6d\xe4\x64\x18\xc8\xdb\x2e\x06\xf2\xfa\xc3\xac\xe0\x88\xce\xf6\xba\xb3\xca\x3a\x8a\x2f\x83\x52\x49\xa1\x36\xfc\xff\x08\x37\x3c\x43\xe5\x0b\x4e\x99\x83\x26\xf9\xd8\x65\x81\x16\x9a\x4e\x2c\x55\xa6\xf8\x16\x95\x2b\x3b\xdd\x5e\x1a\x98\x71\xae\x24\x2b\x5b\xba\x6d\x10\x0a\xae\x8d\xd5\x05\x36\x15\x66\x1c\x45\xba\x0b\x16\xfa\x86\x9b\x74\x03\x5b\xb2\xbe\x2b\xc0\x22\x62\x6c\x05\x4f\x5d\xee\x31\x7f\xf9\xf3\xf3\x13\x22\x6f\x63\x4f\xe5\x5c\xca\x91\x39\x6f\x9a\x77\xa6\x6d\xec\xc2\xff\xc8\xfa\x14\x70\x67\xbc\x8b\x70\x51\x44\xa7\x18\x69\xa3\xde\xc6\x69\x99\xaa\x19\xa7\x4e\xb6\x8f\x89\x44\xef\xd4\xbc\x82\xad\xf7\x65\x6d\x14\xc5\xce\xe4\x47\x23\x79\xb4\x8d\x7f\x70\x13\x23\x1b\x8c\x65\x9d\x8a\xc9\x0a\x7f\x5a\x17\x0b\xf2\xed\x45\x37\x94\xb9\x16\xae\x3b\x5a\x77\xc3\xf5\x27\x6d\x1b\x7f\x25\xd8\xfb\xfd\x1f\x14\xfe\x21\xf9\xe0\x1c\xdb\xbd\xcb\xdc\xe9\x30\xcb\x63\x1e\x84\xc4\x0b\x68\xe5\xf3\x61\xe4\x54\x2c\x08\x9c\x68\x76\x97\x65\xbf\x75\x7d\x9f\xbd\xeb\xfb\xf9\xf4\xd2\xf3\xfa\x2f\xe4\x9a\xb0\x5e\x1e\xf0\x76\x22\x3c\x06\xf7\xbc\x90\x8c\xd8\x53\x24\xfc\x55\x4b\xd1\xa7\x37\x0d\xb8\x45\xb5\x33\x1b\x5b\x01\x92\x1f\x79\x4a\x5b\x33\x98\xef\xe9\x8b\xa8\xcb\x4b\x54\x77\xea\xe6\x41\xb6\x78\x14\xcd\xd6\x8f\x69\xb6\xfa\x51\xed\xb6\xdc\x87\xd1\x2f\x65\x7f\x5b\x34\x5a\x7e\xad\xe8\xbb\x7c\xb8\xf0\xdb\x05\x8b\xa1\xc0\x08\x4e\x56\x15\xda\x15\x94\xeb\x35\xb8\x9c\x38\x49\xf2\x2e\x5f\xba\xb9\x7b\xf5\xc6\x96\x92\xaa\xbd\x71\xa6\x9d\xa9\xf9\xf6\xc5\xde\x6a\x28\x7f\x5c\x5f\xf1\x35\xa4\xb1\xbe\x1a\x35\x23\x59\x86\x52\xcc\xff\xe9\x8b\xe5\xbc\x60\x57\x5e\xc4\x0b\x3c\x2a\x47\xdf\xc8\x82\x89\x2b\x20\x22\x5f\x63\x0c\x42\x02\xc9\x78\x5b\x89\x84\x86\xac\x39\x34\x18\x43\x2d\xba\xbd\xb5\xe6\x24\x07\x08\x86\xa4\x32\x2a\x34\x5d\xf1\xfc\xe6\x76\x19\xdf\xa0\x31\x63\x4d\xde\x25\xe4\x1b\xa4\x4a\x7e\x54\xc2\x8d\x74\xb8\x6c\xfc\x9e\xf6\xc2\x6d\xb2\xe9\x15\x37\x9b\xfa\x32\x49\x65\xb9\xd6\x55\xfe\xc7\x3f\xad\xab\xbf\x92\x22\x27\x3a\xba\x65\x67\x62\x7a\x70\xe3\xe2\x77\x9d\x5c\x95\x84\x27\xeb\xe8\x99\x12\x9a\xec\x68\xcb\xde\xf3\xba\x28\x26\x3d\x93\x36\xaa\x4e\x4d\x4b\x1d\xe9\xf8\xfb\x64\x18\x2c\x3e\xd8\x76\x96\xce\xe8\xe2\x52\xca\xa2\x6d\xd7\x4b\xf8\x31\xcb\x40\xcb\x92\x80\xe5\x92\x8e\xbf\x91\x70\xb3\x41\xb3\xa1\x32\x7b\xc3\xb5\x8f\x0b\x37\x4c\xdb\x7b\xb0\xac\xb6\x98\xf6\x5d\x0c\x8d\xa4\xb2\x7d\xe9\x72\xdd\xf9\xcb\x8e\x51\x97\xb6\xb8\x40\xb3\x58\x8c\xf6\xa4\x96\x19\x5c\xcf\x6c\x15\x78\x8e\x37\xc7\x90\xac\x77\x1d\x56\xdf\xcd\x0c\x72\x7b\x2c\x9a\xa4\xaf\xd8\x6d\x8f\xb0\x43\xbd\x82\x1b\x04\x7e\x25\xa4\x42\x87\xc1\xfa\xe7\x0a\xb8\x81\x1b\x5e\x14\xf0\x6b\xad\x0d\x5c\x22\x50\x9f\x20\x5c\x8f\xef\x8a\xe4\xde\x52\xde\x39\xfe\xd3\x4e\x62\x4e\xc0\x7b\x76\x13\xfe\x9a\x75\xa4\xb9\x26\xa1\x33\x7b\x06\x46\xd5\xb8\xd7\xda\x6c\xdb\xd1\x24\xd3\x7b\x83\x26\x71\xb6\x9e\xe9\x46\x56\x90\xb3\x42\xe3\xa4\x29\x71\x01\x7b\xca\x28\xd9\x4b\x1f\x93\xa2\x7b\xa6\xd1\x3e\xe8\xc7\x63\x9d\xf9\xb8\x73\x98\x88\xbe\x38\x40\xce\xa9\xf3\xce\x20\xc9\x73\xf8\xc6\x0b\x3a\xea\x66\x05\x2f\xfa\x3b\xab\xe3\xd6\x8a\xa5\x29\x56\x46\xbb\xc0\x6a\x5b\x29\x92\xdc\x35\x5c\xc9\x34\xec\x4e\x34\xf4\xa0\x19\xe1\xb1\x00\x0f\x69\x6c\x6a\xdd\x99\xac\xe6\xdc\xec\xd6\xeb\x96\x9f\x2f\xde\x9e\x43\x2a\x95\xc2\xd4\x14\x3b\xd0\xa8\x38\x2b\xf8\x3f\xa9\x3b\x9d\x8b\x4e\x46\x02\xad\xe8\x61\x8a\x59\x98\x23\xd6\xf3\xd7\x2f\xee\x35\x88\xdc\xea\xc2\x5e\x18\x84\xf4\x37\xb4\xf0\x85\xf7\xcb\x11\x7c\xaa\x5d\x13\xcf\x33\x12\x53\x9b\x8d\x95\xe2\xef\x73\x3c\xe3\xf9\xcb\x9c\x09\xe0\x0c\xef\x82\x9c\x2b\x59\x4e\x40\xcf\x06\x87\x83\x1d\xa2\xcb\x99\xbb\x9d\x51\x10\x08\x16\x5b\xa6\xa0\x19\x87\x11\x77\x6e\x9f\x9f\x39\xbc\x03\xb7\xe8\x72\x05\xdf\x35\xd3\xdb\x9d\x99\xcb\x1d\x77\xea\x85\x3b\xe6\x4d\x3c\xc9\xc9\x87\xee\x70\xe8\x19\x4c\x64\x5f\x90\xa9\xc8\x74\x2e\x59\x11\xb8\xe3\xf9\xdb\x93\xc2\x85\x51\xf7\xcc\x0b\x64\xc9\xc7\x4d\x0d\x0f\x75\xc0\xad\xa4\xbf\xf3\x19\xff\x1d\x0f\xb6\x85\xf7\xff\x78\xb6\x2d\xf0\xff\x95\xe3\x7d\x70\xba\xf7\x3d\xc4\xfe\x49\x7e\x78\xc6\x1c\x9e\xe5\x67\xde\x5d\xc8\x70\x6d\xeb\xab\xde\xd1\xb3\x5e\x2e\x55\x8a\xf6\x91\x0a\xa8\xe6\xed\x3d\xd0\x3d\x15\x75\xdd\xcc\xc5\xb0\x7d\xc5\xb1\xb5\x8b\x60\xe5\xc0\xc9\x3f\x0a\xce\x91\x3a\x5c\x64\x30\x7b\x1b\x2a\x73\xa8\xa4\xd6\xfc\xb2\xe8\xaf\x30\xfb\xeb\x53\x99\xcf\x3f\x0f\xce\x30\x8d\x62\xf8\xf8\x69\x5f\xc2\x9b\xb2\x22\x4b\x94\xec\x1a\xa3\xfe\xfb\x0a\x0a\x9c\x7f\x82\x8a\xa9\xf7\x97\xd5\x2e\xb2\xd7\xf0\xb3\x14\x83\x35\x4c\x59\xed\xad\xf1\x74\x6c\x84\x7f\x07\x00\x00\xff\xff\x49\x18\xa5\x7f\x01\x22\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x4f, 0xe4, 0xcd, 0x99, 0xc, 0x30, 0x87, 0x37, 0xd9, 0xe9, 0x1f, 0x3d, 0xf9, 0xb6, 0xc9, 0x71, 0x22, 0xdd, 0x20, 0xd9, 0x4c, 0x11, 0x45, 0x79, 0xeb, 0xe7, 0xb1, 0x73, 0x2f, 0xb, 0x36}}
	return a, nil
}

var _enum_stringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x1a\xdb\x6e\xdc\x36\xf6\x79\xf4\x15\xa7\x42\xdb\x48\x03\x65\xa6\xc5\x06\x79\xf0\xc2\x0f\x45\xd1\x06\x29\x76\xb3\xc1\x4e\x9c\x17\xc3\x08\x68\x89\xf2\xb0\x96\x48\x99\xa4\xe6\xb2\x03\xfd\xfb\xe2\x90\xd4\x75\x24\xd9\x4d\xdc\x2c\x8a\xed\x43\x3a\x12\x0f\xcf\xfd\x2e\x9f\x4e\x2f\x21\xa1\x29\xe3\x14\x7c\xca\xcb\xfc\x93\xd2\x92\xf1\x3b\xbf\xaa\xbc\x58\x70\xa5\x21\xf0\x10\xe4\x5b\x3c\x7b\x47\x72\x0a\x17\x97\xb0\xc2\x87\x95\x79\x7a\x59\x55\xed\xf9\x87\x63\xd1\x39\x37\x4f\xcd\xf9\x8e\x48\x85\x67\x09\x8b\x35\xf8\x19\x51\x5a\xa4\xa9\xa2\xda\x07\xff\x07\xdf\x81\x81\x24\xfc\x8e\xc2\xb7\xf2\x2d\x4f\xe8\x21\xc2\x4b\x59\xd9\xc1\xf8\x11\x1f\x15\x54\x95\xb7\x38\x9d\x80\xa5\x40\x1f\x1c\x8c\x65\xc6\xff\xe4\x57\xd5\x7a\x0d\x9b\x7b\x56\x14\x34\x01\x7b\x74\x3a\xd1\x4c\x51\x73\x70\x3a\x39\xf0\xf7\x92\xa6\xec\x40\x13\xbc\x56\x55\xc0\x14\x10\x3c\xac\x85\xac\x2a\x10\x29\x68\x14\xa0\xb9\xf2\x6f\xb2\xb7\x47\x88\x90\x27\x96\x89\x97\xc8\x85\x03\xf8\x59\xe4\x39\xe5\x1a\x0f\xba\xa4\x3a\xaf\x11\xde\x5e\x05\x80\x49\x66\xfa\x7c\x5c\x82\x7f\xce\x82\xef\xb5\xa8\x42\xcf\x3b\x9d\x58\x0a\x2b\x4e\x72\xaa\x8c\x26\x77\x44\xc2\x2f\x52\xbe\xe5\x3b\x92\xb1\xe4\x74\x6a\xed\x65\x10\xa6\xb9\x5e\xfd\x22\xa5\x90\x69\xe0\x73\xa1\x81\x80\x81\x83\x3e\x60\x04\x5a\x1e\xe1\xfa\x3b\x75\xe3\x47\x60\x9d\x42\xad\x7e\x13\x8c\x07\x9f\xfa\x80\xf8\xaf\x8a\xc0\x8f\xc0\x0f\x43\xcb\x58\xa6\xe8\x53\x18\xa1\xc8\x84\x5a\xbd\xa3\xfb\x39\x46\xfc\xb0\x23\xad\x67\x0d\xef\x84\xad\x2a\xa4\x30\xc6\x0f\x5c\xc2\xe9\xc4\x49\xce\xd2\xa3\x75\x1e\xbc\x6b\xcc\x72\x0e\x2a\xa9\x2e\x25\x47\x17\xc8\x98\xd2\x68\xf9\x42\x28\xc5\x6e\x33\xea\xe4\xb6\x8e\xa4\xf0\xa4\x7f\x7f\xe5\xa5\x25\x8f\xc7\x90\x06\x21\x5c\xdf\xb8\xdb\x27\x6f\xa1\xf3\x02\xdd\x38\x27\xf7\x34\xa8\xdf\x47\x90\xd1\x71\x65\x86\xa1\xb7\x88\x45\x71\x0c\x74\x5e\x44\xa3\xe2\x85\xde\xc2\x72\x0d\x3a\x2f\x3c\x13\x3b\x94\x27\x46\xe7\x28\xe5\xc6\x12\x66\x79\x91\x51\x74\x3e\x05\x7a\x4b\xdd\x5b\x2a\x81\x71\x4d\x65\x4a\x62\xea\xf8\x0f\x0e\x03\x11\x42\x07\x1b\x84\xd0\xca\xe0\x08\xda\x17\xc1\x21\xf4\x2c\xad\xb7\xea\xa3\x31\x5a\xad\xc5\xfd\x96\xea\x2d\x95\x86\xa2\xbb\x1c\x0b\xae\x09\xe3\x34\xb1\x81\x36\x66\xe4\x69\x4e\x1c\xfe\x20\x84\x5b\x21\x32\x64\xe4\x53\x84\x9e\x83\xfa\x7c\x4f\xa4\xa2\xfd\x0b\x41\xc3\x5f\xab\x23\x84\xbe\xbc\x04\xce\x32\xe4\x79\xc4\x65\x4c\x62\x31\x2e\x03\x25\xcf\x49\xd1\x78\x0d\xac\x32\xb1\xa7\x32\x26\x8a\x82\xd3\xed\x08\x4d\x20\x5a\xd3\xbc\x40\x35\x0b\x14\x76\x47\x25\x3a\xb3\x93\x5e\x0b\x93\x5c\x46\xa4\x1d\x63\x1f\x1d\xdb\xdd\x0c\x21\x18\x86\xa4\x89\x98\x10\x95\xc0\x52\x38\x44\x20\xee\x51\x0d\x63\xd2\x5c\x23\xa2\x9b\xbf\x23\xc4\xc9\x5b\xd4\x9a\x38\x44\x46\x0b\x8b\xca\xa5\x0c\x51\x4b\x86\x29\xeb\x67\xfc\xcd\xb8\xa2\x5c\x31\xcd\x76\x14\x0a\xe4\x2f\x82\x04\x05\x50\xb4\x20\x92\x68\x0a\x99\x10\xf7\x65\x81\x52\x15\x92\xee\x28\xd7\x50\x72\x4e\x63\xaa\x14\x91\x47\x88\x85\x8d\xa0\x5a\x6d\xa8\x80\x46\x13\x2c\x85\x3d\x85\x44\xf0\x17\x1a\x38\xa5\x09\x68\xb1\x7a\x82\x24\x75\xf2\xf9\x20\xfe\x81\x58\x8d\x8a\xc2\x39\xd1\x9a\x64\x51\x9f\x0d\x74\xec\xfb\x61\xd4\xcb\x82\xdf\x29\xf4\xcc\xef\xf6\x7e\x04\x88\x3c\x9a\x4c\x5a\xc6\xe9\x5d\x0a\xca\x4b\xa5\x8d\x86\x50\x7f\xeb\x35\xfc\xb3\x54\x7a\xcc\x39\x9c\x43\xa8\x59\x8f\x88\x80\xf0\x04\x0a\xc2\x59\xac\x10\x3b\x53\x80\x19\xd1\xb0\xe0\xbc\x65\x02\x7f\xdf\x63\x06\xb4\x4f\xde\x62\x47\xb2\xd9\x78\x31\xda\x34\x56\x40\xa0\x6f\x4c\x98\x18\xbd\x1a\x66\x02\x2a\x65\xe8\x2d\xaa\x46\x95\x3b\x92\x99\x7c\xd3\x4f\xc7\x85\x96\xa8\x85\xa9\x18\x7e\xaf\x65\x10\xc2\xf2\x9c\x39\x87\xf4\xfb\xc3\x08\xce\x9c\x48\xb5\x25\x59\xad\x5d\xfb\xf4\x81\x1e\xf4\x30\xaf\x69\x7c\xe7\xa0\x33\x2a\x21\xa7\x7a\x2b\x92\xe9\x8c\xd2\x41\x15\x84\x10\x5c\xdf\xdc\x1e\x35\xed\xc6\x96\xe3\xca\x1e\x74\x12\x4a\x54\xa7\x90\xf5\x1a\xae\x78\xfe\x08\x47\x25\x9f\xe1\x69\x39\x64\xaa\x87\x2f\x30\x08\x2c\xfd\xd0\x32\xe6\xaa\xc8\x53\x52\x1f\x5e\x0e\x47\x4d\xda\xe6\x43\x63\xd2\xe5\x01\x2e\x4d\x01\xa9\x0f\xac\x78\x03\x43\x08\x09\x2b\xf5\x90\x99\x7f\x18\xd7\xe6\xff\x65\xfd\x83\x97\x59\xd6\xfd\xad\xb4\x6c\xeb\xfe\xa0\x70\xb1\xec\xbd\x96\x83\xb2\x6f\x3b\xbc\x42\x98\x92\x64\xbc\x9e\x65\x7e\x08\xeb\x35\x08\x4e\xa1\xc0\x3a\x82\x5d\x58\x2a\x24\x14\x24\xbe\x27\x77\x14\xe2\x8c\xa8\x2d\x55\x03\xf6\x26\x39\x73\xec\x0c\x32\xcb\xe6\x21\x73\xdd\x24\x56\xe5\xe2\xba\x7f\x7a\x63\xd3\xa3\x79\x73\xc5\x15\xbb\xe3\x34\xa9\xaa\xd2\x29\x86\x71\xfd\xfa\xd5\xe9\x19\xda\xe2\xa7\xf7\xbb\x33\xfd\xe2\x45\x7b\x60\xe0\xab\x2a\xea\xf4\x4b\xe3\xf5\x6e\xf3\x90\x6d\x62\xc2\x1b\xd9\x1f\x13\xf6\xa6\x7f\xfd\x7f\x28\xbb\x13\xf1\x62\x4a\x1b\x7d\xd9\x3b\x9e\xfc\xb2\xe3\x2b\x8d\x8f\x8c\xf8\xca\x64\x80\x9a\x54\xbf\x79\xc8\xde\x72\x1d\xec\xc0\xa8\xc5\x85\x66\x9d\x64\x47\x4b\x98\x53\xf5\x84\x92\x0d\x9a\xc0\xb1\xb9\x1b\x85\x09\xdd\xe9\x8d\x09\xe8\x6f\xc4\x7d\x27\x90\xa7\xca\x54\x1b\xdd\x98\xae\xfb\xd1\xfd\xb8\x84\x57\x56\xc4\xf2\xf3\x64\xc4\xb2\x35\x94\x61\x44\xcc\x31\xb0\xaf\x2f\xea\xaf\x99\x20\xc8\xda\x0e\x52\xfb\xeb\xcb\x4d\xda\x8d\x9b\x60\x17\x7e\x3d\x59\x5c\xcb\xbe\xab\x7b\x81\x5a\x90\xf5\x1a\x7e\x52\xaa\xcc\x29\x98\x8e\x36\x65\x52\x69\x6f\x61\x6e\x25\xb3\xe5\x64\x37\xac\x21\x28\x42\x8b\x0d\x53\xf6\x1d\x95\xa6\x53\x40\x5c\x1f\x3b\x8d\x86\xd2\x12\xdb\x9e\x95\x43\x3b\xa2\xa7\x2b\x56\xcf\xe5\x6f\x9d\xc6\xd0\xe9\x22\xf8\xf1\x87\x08\x5e\xbf\x0a\xbd\xc5\x39\xe9\x5e\xf9\x42\x55\x35\xad\xdf\xaa\xd6\xc1\x38\x29\x47\x00\xdd\xba\x61\x35\x6c\x95\x6d\xdf\x4d\x15\x41\x3b\x50\x61\xb6\x1c\x8e\x53\x31\xe1\x7c\x7c\x9a\x3a\xb3\x11\xc2\x06\x36\xc3\x35\xe0\xa7\x2a\x04\x6c\xaf\xfa\x4d\xbd\x05\xba\x6c\x6b\xb6\x61\xf1\xbc\x81\x6d\xa4\x47\x39\xac\x91\x61\xcf\x12\x2a\x5d\x62\x15\x29\x28\x64\x90\xe0\x18\x8b\x35\x54\xad\x0c\x54\x22\xd9\x8e\x4a\x9b\x47\xeb\xb9\x96\x68\xdb\xb5\x88\xc2\xac\x3d\xb6\xd4\x0e\xc2\x58\x74\xe9\xa1\xa0\x09\xa3\x3c\x3e\x7a\x0b\xb5\x67\x3a\xde\xc2\x0e\x0d\x6c\x73\x6f\x80\x88\x0d\xe7\xfd\x04\x3b\x55\x8c\xd1\xc5\x63\x3b\x65\xe8\xd7\xaf\x2e\xbc\xc5\xc2\x8c\x66\x1d\x03\x9a\xd4\x13\x3a\x28\xeb\xc8\x63\x60\xb5\xaf\xd7\x90\xb6\x55\x9a\x81\x54\xf5\x85\xfa\x46\x5f\xa3\x17\xb5\xa2\x77\x2d\x83\x53\xec\xd5\x91\x5d\x63\x5a\x9e\xa3\x42\x3b\x3a\x1b\x76\x1d\x77\xa2\x25\x72\xce\x6c\xe8\x2f\x6b\x06\xca\x09\x0e\x4c\x72\x2e\x87\x3c\x94\x93\x0a\xbd\xea\x69\x74\xe9\xb0\x7e\x16\x83\xd3\xca\x58\x76\xb4\xd1\x70\xf2\x6c\x34\x96\x0d\xfb\x2e\x49\x5f\x60\x7f\xf8\xbb\x12\xbc\xee\xfa\x15\xd0\x1d\x95\x47\xbd\x35\xe3\x26\x4e\x5a\x0e\xd2\x8c\x52\xfa\x05\xbe\xe1\x65\x7e\x6b\xb2\xd5\x90\x44\x53\x03\x1a\x11\x9e\x85\xcc\xb3\x88\x5f\xf3\xd6\xaa\x60\x59\x3e\xa7\x09\xbb\xde\xd4\x35\x62\xf9\xbc\x56\xbc\xea\x9b\x71\xd9\x06\xf6\xb3\xa0\x77\x31\x6e\x08\xd4\x55\xe5\x2c\x85\x2c\x0f\xb6\x3a\x4d\xd7\xba\x41\x26\x99\xbf\xf0\x47\x13\xca\x9f\x93\x25\xbe\x54\x93\xf3\x32\xd6\x0a\xb5\xdb\xee\x84\xa6\xa4\xcc\x8c\xef\xb5\x85\xb8\x19\xe4\x98\x6d\x68\xda\x71\xed\x6c\x89\x8b\x04\x9b\x22\xeb\x0d\xc7\xcb\xb9\xf9\x6d\xbd\x06\x5b\xaf\x06\x15\xd8\xd6\x32\x7b\xf6\xa4\xad\xa6\x81\xc4\x99\xbf\x5b\x05\xbb\x93\xbf\x91\xe1\xc9\xeb\xc5\xb3\x0e\xa5\xed\x20\xa2\x66\xc8\x9e\xed\x23\xed\x94\x73\x6d\xc8\x8e\x75\x8a\x06\xd3\xc4\xa6\xaa\xe1\x64\x6e\x5d\xd5\xd9\xdc\xb8\xb5\xca\x68\x6b\xbe\x23\x59\x58\x47\xce\x8e\x64\xce\xe6\x51\xd3\x0b\xd9\x95\xfe\x5f\xdd\x14\xfd\x0d\xb6\x21\x10\x46\xe7\x4b\x8f\xba\xf1\x73\x0a\x4b\x33\x72\xe7\x44\xdf\xd0\xb3\x55\xcf\x1b\x91\x11\x7e\x07\x08\xe4\x9a\xaa\x46\x78\x40\xd9\xe7\x9a\x42\xaa\x91\x89\x66\x77\xd7\xec\x79\x76\xf3\x6d\xb9\x69\x5e\xeb\xe4\xd2\xe9\x89\xed\x62\xea\xcd\x3c\x8f\x6f\xa8\xd6\x5d\x0b\x3d\xc6\xe4\x1b\xaa\x83\xb0\xdb\xb4\x76\x16\x64\xcb\x83\xa3\x69\xe6\xfa\x01\xd1\x3b\xa6\xb7\xe5\xed\x2a\x16\xf9\x5a\x15\xe9\x8f\x7f\x5b\x17\xbf\xa2\x22\x07\x3a\x9a\xa1\x8c\x48\xc7\x3e\x40\xf8\x83\xcc\x32\xb9\xb1\x1a\xd9\x4d\x99\x25\xbe\x49\x51\xef\xca\x2c\x1b\xec\x23\x95\x96\x65\xac\x4d\x33\xdb\x7d\xbf\x18\x0e\x69\xf6\x7b\xc7\x02\xff\xbb\x15\x22\x3b\x9d\xd6\x4b\xf8\x29\x49\x40\x09\x33\x15\xa5\x02\x7b\x03\x2d\x3a\x5f\x42\x98\x72\x7d\xfd\x9e\x28\x50\x54\x43\x52\x1a\xa1\xda\x15\x21\x3e\x09\x69\xa6\xe2\xe5\xba\x72\xeb\xf9\xce\x06\x74\xb1\xa1\x7a\xb1\xe8\xd0\x34\xdf\x7b\xec\x82\xc7\x68\xf0\x1d\xdd\x9f\x8b\x64\xdc\xab\x3f\x70\x1c\x46\x24\x37\xf1\xe6\x3c\xee\xb0\xaa\x67\x15\xb3\x85\x3b\x52\x15\xc1\x9e\x02\xbb\xe3\x42\x52\x2b\x8a\xf1\xd3\x08\x98\x86\x3d\xcb\x32\xf8\xbd\x54\x1a\x6e\x29\xe0\x84\xe4\x8a\x80\x9d\x0e\xbc\xc5\x27\xbb\xed\x43\x44\x39\xb9\x47\x90\x23\x3e\xc7\x5b\x1a\xdf\x43\x66\x18\x53\xb0\x25\x45\x71\xac\xad\xeb\x1c\xea\x8f\xce\x5b\x63\x32\x7d\xc1\xcc\x75\x58\x0d\xb7\xf3\x87\x95\xb5\xfa\xd8\x28\x16\x41\x4a\x32\x45\x07\x13\x59\xdd\xa4\x0c\xbe\xfc\xb4\x5c\x85\xde\xa2\xc5\x1a\xb4\xdf\xa8\xc2\x81\x2e\x3e\x2f\xdf\x8e\x69\xe4\xd1\x9c\x8b\xf5\xc7\xf1\x34\xcc\xa1\xf6\xdb\x8a\x19\x21\xdd\xeb\x92\x27\x54\x66\x47\xf4\x5c\xa4\xf2\xa2\xf6\x71\x92\x62\x82\xc1\x80\xc3\x52\x65\x6c\xdd\x99\xae\xcf\x14\xe2\x98\xf2\x1e\x59\xfc\xff\xb6\xf9\xd7\x3b\x88\x85\x94\x34\xd6\xd9\x11\x14\x95\x8c\x64\xec\x3f\x38\xbd\x8e\xc5\xb2\x16\x80\x37\x6a\x7d\xf0\x51\x7d\x74\x50\x8f\x7f\x08\xb0\x7f\x01\x81\xa2\x6c\xcc\xe6\xda\xc7\x9f\xbe\xd1\x13\x77\xa6\xeb\xe8\x09\x47\x85\x95\xc3\x19\xf0\xd5\x4c\x29\x76\x5f\x16\x1c\xe2\xf1\xef\x0a\x03\x81\x13\xfa\x98\xc8\xa9\x14\xf9\x40\xe8\xd1\xb8\xe8\x51\x08\x6e\xcf\x3f\x33\xf0\x15\xd6\xb9\x4b\xd0\xb2\xa4\x58\x87\x25\x1c\xba\x11\xd4\xa4\x0a\x23\x6f\x83\x2d\xb8\x8d\xe0\xfb\xc3\x4c\x29\xae\xab\xb0\x0d\x0c\x6e\x23\xe1\x10\x0e\x4a\x58\x9b\xd9\x06\x3f\x59\x6a\x3e\x91\xcd\x24\xf6\x89\xbc\x8e\xa6\xb3\xa9\x1d\x85\x3b\x3f\x9f\x4f\xa1\x1b\x2d\x9f\x98\x45\xd1\x92\x48\xe1\x59\x33\xe8\x9f\x92\x09\x0c\xa7\xcf\x91\x0c\xa6\x62\xba\xfe\xeb\x81\x4e\x03\xf9\x15\x03\xdb\x88\xf7\xff\x18\xdb\x46\xf0\xbf\x4a\x78\xf7\xa2\xdb\xb6\x6f\xff\x0d\x00\x00\xff\xff\x24\xda\x0b\xed\x8c\x26\x00\x00")

func enum_stringTmplBytes() ([]byte, error) {
	return bindataRead(
		_enum_stringTmpl,
		"enum_string.tmpl",
	)
}

func enum_stringTmpl() (*asset, error) {
	bytes, err := enum_stringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum_string.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0x9c, 0x4d, 0xed, 0x38, 0xe0, 0xc5, 0xb9, 0x24, 0x57, 0x5c, 0xc6, 0xb1, 0x15, 0x6d, 0x7, 0xe7, 0x4f, 0xbb, 0xb0, 0xb0, 0x6d, 0xf5, 0xbb, 0x1d, 0x75, 0xec, 0xba, 0xeb, 0x61, 0x79, 0x97}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl":        enumTmpl,
	"enum_string.tmpl": enum_stringTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl":        {enumTmpl, map[string]*bintree{}},
	"enum_string.tmpl": {enum_stringTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
